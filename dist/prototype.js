// Generated by CoffeeScript 1.9.2
this.Prototype = (function() {
  var clear, hide, init, initialState, prepareDom, states, triggers;

  initialState = null;

  states = null;

  triggers = null;

  clear = [];

  hide = [];

  function Prototype(setup) {
    if (setup != null) {
      initialState = setup.initialState, states = setup.states;
      Prototype.gotoState(initialState);
    }
    new prepareDom();
  }

  prepareDom = (function() {
    var TEXTTOKEN, computeFontSize, groups, makeTextarea, rectangles, transferAllAttributes, translateSvgAttributesToCssText;

    function prepareDom() {}

    TEXTTOKEN = 'HTMLINPUT-TEXT';

    translateSvgAttributesToCssText = function(destination, source) {
      destination.attr('placeholder', source.text());
      return destination;
    };

    transferAllAttributes = function(destination, source) {
      var attributes;
      attributes = source.prop('attributes');
      return _.each(attributes, function(value) {
        if (value.name !== 'id') {
          return destination.attr(value.name, value.value);
        }
      });
    };

    computeFontSize = function(rectangle) {
      var size;
      size = parseInt(rectangle.attr('height') * .6);
      return size + "pt";
    };

    makeTextarea = function(rectangle, id, styleModel) {
      var foreignObject, textarea;
      foreignObject = $(document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject'));
      transferAllAttributes(foreignObject, rectangle);
      textarea = $("<textarea />").addClass('PROTO-dynamic').css('font-size', computeFontSize(rectangle));
      if (id != null) {
        textarea.attr('id', id.substring(TEXTTOKEN.length + 1));
      }
      if (rectangle.attr('width')) {
        textarea.css('width', (rectangle.attr('width')) + "px");
      }
      if (rectangle.attr('height')) {
        textarea.css('height', (rectangle.attr('height')) + "px");
      }
      if (styleModel != null) {
        if (styleModel.attr('font-family')) {
          textarea.css('font-family', "" + (styleModel.attr('font-family')));
        }
        if (styleModel.attr('font-size')) {
          textarea.css('font-size', "" + (styleModel.attr('font-size')));
        }
      }
      foreignObject.append(textarea);
      return foreignObject;
    };

    rectangles = $("rect[id^=" + TEXTTOKEN + "]");

    _.each(rectangles, function(rect) {
      var rectangle;
      rectangle = $(rect);
      return rectangle.after(makeTextarea(rectangle, rectangle.attr('id')));
    });

    groups = $("g[id^=" + TEXTTOKEN + "]");

    _.each(groups, function(group) {
      var rectangle, text, textarea;
      group = $(group);
      rectangle = group.find('rect');
      text = group.find('text');
      textarea = makeTextarea(rectangle, group.attr('id'), text);
      textarea.bind('keyup', function(event) {
        if (event.target.value.length) {
          return text.hide();
        } else {
          return text.show();
        }
      });
      text.css('pointer-events', 'none');
      return rectangle.after(textarea);
    });

    return prepareDom;

  })();

  init = function(state) {
    var hints, initialize, view;
    view = state.view, clear = state.clear, hide = state.hide, hints = state.hints, triggers = state.triggers, initialize = state.initialize;
    _.each(clear, function(selector) {
      return Prototype.clearText(selector);
    });
    _.each(initialize, function(text, selector) {
      return Prototype.setText(selector, text);
    });
    _.each(triggers, function(value, key) {
      $("#" + key).on("click", value).css('cursor', 'pointer');
    });
    _.each(hide, function(selector) {
      return Prototype.hide(selector);
    });
    _.each(hints, function(value, key) {
      return $('body').attr("title", value);
    });
  };


  /*
  Static Methods
   */


  /*
   * Sets the text of an element
   * @param {string} selector CSS selector
   * @param {string} text The new text to be displayed
   */

  Prototype.setText = function(selector, text) {
    var element;
    if ((text == null) || text === "") {
      text = '&nbsp';
    }
    element = $("#" + selector)[0];
    if (element != null) {
      return element.innerHTML = text;
    } else {
      return console.warn("setText: there is no id " + selector);
    }
  };

  Prototype.clearText = function(selector) {
    return Prototype.setText(selector, '');
  };

  Prototype.hide = function(selector) {
    return $("#" + selector).css('visibility', 'hidden');
  };

  Prototype.show = function(selector) {
    return $("#" + selector).css('visibility', 'visible');
  };

  Prototype.gotoState = function(state) {
    return $.get("views/" + states[state].view, function(data) {
      $(document.body).empty();
      $(document.body).append(data.documentElement);
      init(states[state]);
      Prototype.currentState = state;
    });
  };

  Prototype.currentState = null;

  Prototype.mask = function(selector) {
    $("#" + selector).css('color', 'white');
    return $("#" + selector).css('opacity', 1);
  };

  Prototype.unmask = function(selector) {
    $("#" + selector).css('color', null);
    return $("#" + selector).css('opacity', 0);
  };

  return Prototype;

})();
