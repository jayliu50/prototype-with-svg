// Generated by CoffeeScript 1.8.0
var backCode, backCopies, code, collate, copies, cycleTray, inputCode, inputCopies, load, mode, proto, setup, toggleCollate, toggleLoad, toggleMode, tray;

code = '';

inputCode = function(c) {
  code += c;
  Prototype.setText('text-code', code);
  if (code.length === 4) {
    if (code === '1505') {
      return Prototype.gotoState('main');
    } else {
      Prototype.show('text-error-msg');
      return _.delay((function() {
        Prototype.hide('text-error-msg');
        code = '';
        return Prototype.clearText('text-code');
      }), 2000);
    }
  }
};

backCode = function() {
  code = code.slice(0, -1);
  return Prototype.setText('text-code', code);
};

copies = 0;

inputCopies = function(c) {
  copies = copies * 10 + c;
  if (copies > 50) {
    copies = 50;
  }
  return Prototype.setText('text-copies-count', copies);
};

backCopies = function() {
  copies = Math.floor(copies / 10);
  return Prototype.setText('text-copies-count', copies);
};

load = false;

toggleLoad = function() {
  load = !load;
  if (load) {
    Prototype.show('toggle-at-feeder');
    return Prototype.hide('toggle-at-copybed');
  } else {
    Prototype.hide('toggle-at-feeder');
    return Prototype.show('toggle-at-copybed');
  }
};

mode = false;

toggleMode = function() {
  var collate;
  mode = !mode;
  if (mode) {
    Prototype.show('toggle-at-packet');
    Prototype.hide('toggle-at-single');
    Prototype.show('Packet');
    Prototype.hide('text-start');
    Prototype.show('toggle-at-copybed');
    load = false;
    Prototype.show('toggle-at-collate-no');
    return collate = false;
  } else {
    Prototype.hide('toggle-at-packet');
    Prototype.show('toggle-at-single');
    Prototype.hide('Packet');
    Prototype.show('text-start');
    Prototype.hide('toggle-at-feeder');
    Prototype.hide('toggle-at-copybed');
    Prototype.hide('toggle-at-collate-yes_1_');
    return Prototype.hide('toggle-at-collate-no');
  }
};

collate = false;

toggleCollate = function() {
  collate = !collate;
  if (collate) {
    Prototype.show('toggle-at-collate-yes_1_');
    return Prototype.hide('toggle-at-collate-no');
  } else {
    Prototype.hide('toggle-at-collate-yes_1_');
    return Prototype.show('toggle-at-collate-no');
  }
};

tray = 0;

cycleTray = function(direction) {
  switch (tray) {
    case 0:
      Prototype.setText('text-tray', 'Tray A 8.5 &times; 11');
      break;
    case 1:
      Prototype.setText('text-tray', 'Tray B 11 &times; 17');
      break;
    case 2:
      Prototype.setText('text-tray', 'Tray C Custom');
  }
  if (direction) {
    tray++;
  } else {
    tray--;
  }
  if (tray === 3) {
    tray = 0;
  }
  if (tray === -1) {
    return tray = 2;
  }
};

setup = {
  initialState: 'main',
  states: {
    login: {
      view: "Copy Machine Export-01.svg",
      hide: ['text-error-msg'],
      clear: ['text-code'],
      triggers: {
        num0_1_: function() {
          return inputCode('0');
        },
        num1_1_: function() {
          return inputCode('1');
        },
        num2_1_: function() {
          return inputCode('2');
        },
        num3_1_: function() {
          return inputCode('3');
        },
        num4_1_: function() {
          return inputCode('4');
        },
        num5_1_: function() {
          return inputCode('5');
        },
        num6_1_: function() {
          return inputCode('6');
        },
        num7_1_: function() {
          return inputCode('7');
        },
        num8_1_: function() {
          return inputCode('8');
        },
        num9_1_: function() {
          return inputCode('9');
        },
        numback_1_: function() {
          return backCode();
        }
      }
    },
    main: {
      view: "Copy Machine Export-02.svg",
      hide: ['toggle-at-packet', 'toggle-at-feeder', 'toggle-at-collate-yes_1_', 'Packet'],
      clear: ['text-copies-count'],
      triggers: {
        num0_1_: function() {
          return inputCopies(0);
        },
        num1_1_: function() {
          return inputCopies(1);
        },
        num2_1_: function() {
          return inputCopies(2);
        },
        num3_1_: function() {
          return inputCopies(3);
        },
        num4_1_: function() {
          return inputCopies(4);
        },
        num5_1_: function() {
          return inputCopies(5);
        },
        num6_1_: function() {
          return inputCopies(6);
        },
        num7_1_: function() {
          return inputCopies(7);
        },
        num8_1_: function() {
          return inputCopies(8);
        },
        num9_1_: function() {
          return inputCopies(9);
        },
        numback_1_: function() {
          return backCopies();
        },
        'log-off': function() {
          return Prototype.gotoState('login');
        },
        'load-from': function() {
          return toggleLoad();
        },
        'toggle-single-packet': function() {
          return toggleMode();
        },
        'toggle-collate': function() {
          return toggleCollate();
        },
        'tray-up': function() {
          return cycleTray(true);
        },
        'tray-down': function() {
          return cycleTray(false);
        }
      }
    }
  }
};

proto = new Prototype(setup);
